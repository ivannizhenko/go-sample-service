openapi: "3.0.0"
info:
  description: "Go Sample Service"
  version: "1.0.0"
  title: "Go Sample Service"  
servers:
  - url: "http://127.0.0.1:8001/"
    description: "localhost"
tags:
  - name: "server"
    description: "Everything about the server"
  - name: "product"
    description: "Everything about a product"
paths:
  /:
    get:
      tags:
        - "server"
      summary: "Server Health Check"
      operationId: "healthCheck"
      responses:
        "200":
          description: "Health Status"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  result:
                    type: string
              example:
                result: "ok"
  /products:
    get:
      tags:
        - "product"
      summary: "Get all Products"
      operationId: "getProducts"
      parameters:
        - in: query
          name: count
          schema:
            type: integer
          required: false
          example: 10
        - in: query
          name: start
          schema:
            type: integer
          required: false
          example: 0
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductModel"
  /product:
    post:
      tags:
        - "product"
      summary: "Create a Product entry"
      operationId: "createProduct"
      requestBody:
        description: "Product object that needs to be created"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductModel"
            example:
              id: 1
              name: "Scrub Daddy"
              price: 3.69
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductModel"
  /product/{productId}:
    get:
      tags:
        - "product"
      summary: "Find a Product by ID"
      description: "Returns a single Product"
      operationId: "getProductById"
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of Product to return"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductModel"
        "404":
          description: "Product not found"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
    put:
      tags:
        - "product"
      summary: "Update a Product"
      operationId: "updateProduct"
      parameters:
        - name: "productId"
          in: "path"
          description: "ID of the Product that needs to be updated"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        description: "Product object properties that needs to be updated"
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/ProductModel"
            example:
              name: "Scrub Daddy 2"
              price: 3.99
      responses:
        "200":
          description: "Successful update"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductModel"
        "404":
          description: "Product not found"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
    delete:
      tags:
        - "product"
      summary: "Delete a Product"
      description: ""
      operationId: "deleteProduct"
      parameters:
        - name: "productId"
          in: "path"
          description: "Product id to delete"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "Product deleted"
        "404":
          description: "Product not found"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  error:
                    type: "string"
components:
  schemas:
    ProductModel:
      type: "object"
      required:
        - "name"
        - "price"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
          description: "the name of a product"
        price:
          type: "number"
          description: "total cost of a product"